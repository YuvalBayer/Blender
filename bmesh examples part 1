from ut import *
import bmesh

if str((bpy.context.object))!='None': # Checking if there is activated object
    mode('OBJECT') # if there isn't we are not in active mode for sure  
delete_all()

def exp2():
    # Create a cube and pull an edge along the y-axis                  
    create.cube('cube2')
    spec.location('cube2',[0,0,0])
    mode('EDIT')

    bm = bmesh.from_edit_mesh(bpy.context.object.data)
    bm.edges.ensure_lookup_table()
    bm.edges[4].select = True
    bpy.ops.transform.translate(value = (0, 0.5, 0))

    mode('OBJECT')

def exp3():
    create.cube('cube3')
    spec.location('cube3',[3,0,0])
    mode('EDIT')

    bm = bmesh.from_edit_mesh(bpy.context.object.data)
    bm.verts.ensure_lookup_table()
    bm.verts[3].select = True
    bpy.ops.transform.translate(value = (0, 1, 1))

    mode('OBJECT')



# Create a cube and rotate a face around the y-axis                  

create.cube('cube1')
spec.location('cube1',[-3,0,0])
mode('EDIT')

'''
Not sure why
I think in the new version after switching to EDIT 
it's deselect all
'''
#bpy.ops.mesh.select_all(action="DESELECT")



''' 
Set to face mode for transformations.                
This will only affect how we visualize selections in Edit Mode.
We select FACE (out of FACE, EDGE and VERT) for this example because
 it's the best mode for visualizing all three types simultanseously.
'''
bpy.ops.mesh.select_mode(type = "FACE")



'''
In general, instantiating a bmesh object requires us to pass 
a bpy.data.meshes datablock to bmesh.from_edit_mesh()
 while in Edit Mode.
'''
bm = bmesh.from_edit_mesh(bpy.context.object.data)



'''
Instances of bmesh objects are not persistent. 
Unless Blender detects that it is being actively used, 
the bmesh object will dereference the mesh datablock, 
garbage collect internal data, and return <BMesh dead 
at some_memory_address>. It requires programmers to execute extra
commands to keep it alive.
'''
bm.faces.ensure_lookup_table()



'''
Selecting face of index 1
'''
bm.faces[1].select = True


'''
This version it's orient_axis = 'Y'
Last Version it's axis =[0,1,0]
'''
bpy.ops.transform.rotate(value = 0.3, orient_axis = 'Y')

mode('OBJECT')


exp2()
exp3()


